{"ast":null,"code":"import _classCallCheck from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ProductTrackerError } from '../../models/ProductTrackerError';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/platform-browser\";\nexport var DashboardComponent = /*#__PURE__*/function () {\n  function DashboardComponent(dataService, route, title) {\n    _classCallCheck(this, DashboardComponent);\n    this.dataService = dataService;\n    this.route = route;\n    this.title = title;\n  }\n  _createClass(DashboardComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Handled by resolver\n      // this.dataService.getAllProducts().subscribe(\n      //     (data: Product[] | ProductTrackerError) => this.allProducts = <Product[]>data,\n      //     (err: ProductTrackerError) => console.log(err.friendlyMessage),\n      //     () => console.log('All done getting products.')\n      // );\n      var resolvedData = this.route.snapshot.data['resolvedBooks'];\n      if (resolvedData instanceof ProductTrackerError) {\n        console.log(\"Dashboard component error: \".concat(resolvedData.friendlyMessage));\n      } else {\n        this.allProducts = resolvedData;\n      }\n      this.dataService.getAllCustomers();\n      this.favoriteProduct = this.dataService.favoriteProduct;\n      this.title.setTitle('Product Tracker');\n    }\n  }, {\n    key: \"deleteProduct\",\n    value: function deleteProduct() {\n      var _this = this;\n      this.dataService.deleteProduct(productId).subscribe(function (data) {\n        var index = _this.allProducts.findIndex(function (product) {\n          return product.productId === productId;\n        });\n        _this.allProducts.splice(index, 1);\n      }, function (err) {\n        return console.log(err);\n      });\n    }\n  }]);\n  return DashboardComponent;\n}();\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Title));\n};\nDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"app-dashboard\"]],\n  decls: 0,\n  vars: 0,\n  template: function DashboardComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;AAOA,SAASA,mBAAmB,QAAQ,kCAAkC;;;;;AAStE,WAAaC,kBAAkB;EAK3B,4BAAoBC,WAAwB,EACxBC,KAAqB,EACrBC,KAAY;IAAA;IAFZ,gBAAW,GAAXF,WAAW;IACX,UAAK,GAALC,KAAK;IACL,UAAK,GAALC,KAAK;EAAW;EAAC;IAAA;IAAA,OAErC,oBAAQ;MACJ;MACA;MACA;MACA;MACA;MACA;MAEA,IAAIC,YAAY,GAAoC,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACC,IAAI,CAAC,eAAe,CAAC;MAE7F,IAAIF,YAAY,YAAYL,mBAAmB,EAAE;QAC7CQ,OAAO,CAACC,GAAG,sCAA+BJ,YAAY,CAACK,eAAe,EAAG;OAC5E,MAAM;QACH,IAAI,CAACC,WAAW,GAAGN,YAAY;;MAEnC,IAAI,CAACH,WAAW,CAACU,eAAe,EAAE;MAClC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACX,WAAW,CAACW,eAAe;MAGvD,IAAI,CAACT,KAAK,CAACU,QAAQ,CAAC,iBAAiB,CAAC;IAC1C;EAAC;IAAA;IAAA,OAED,yBAAa;MAAA;MACT,IAAI,CAACZ,WAAW,CAACa,aAAa,CAACC,SAAS,CAAC,CACpCC,SAAS,CACN,UAACV,IAAU,EAAI;QACX,IAAIW,KAAK,GAAW,KAAI,CAACP,WAAW,CAACQ,SAAS,CAAC,iBAAO;UAAA,OAAIC,OAAO,CAACJ,SAAS,KAAKA,SAAS;QAAA,EAAC;QAC1F,KAAI,CAACL,WAAW,CAACU,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACrC,CAAC,EACD,UAACI,GAAQ;QAAA,OAAKd,OAAO,CAACC,GAAG,CAACa,GAAG,CAAC;MAAA,EACjC;IACT;EAAC;EAAA;AAAA;AAxCQrB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["ProductTrackerError","DashboardComponent","dataService","route","title","resolvedData","snapshot","data","console","log","friendlyMessage","allProducts","getAllCustomers","favoriteProduct","setTitle","deleteProduct","productId","subscribe","index","findIndex","product","splice","err","selectors","decls","vars","template","encapsulation"],"sourceRoot":"","sources":["C:\\Users\\User\\Projects\\meanstack\\src\\app\\components\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, VERSION } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { Customer } from '../../models/customer';\r\nimport { Product } from '../../models/product';\r\nimport { ProductTrackerError } from '../../models/ProductTrackerError';\r\nimport { DataService } from '../../../data.service';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styles: []\r\n})\r\n\r\nexport class DashboardComponent implements OnInit {\r\n    allProducts: Product[];\r\n    allCustomers: Customer[];\r\n    favoriteProduct: Product;\r\n\r\n    constructor(private dataService: DataService,\r\n                private route: ActivatedRoute,\r\n                private title: Title) { }\r\n    \r\n    ngOnInit() {\r\n        // Handled by resolver\r\n        // this.dataService.getAllProducts().subscribe(\r\n        //     (data: Product[] | ProductTrackerError) => this.allProducts = <Product[]>data,\r\n        //     (err: ProductTrackerError) => console.log(err.friendlyMessage),\r\n        //     () => console.log('All done getting products.')\r\n        // );\r\n\r\n        let resolvedData: Product[] | ProductTrackerError = this.route.snapshot.data['resolvedBooks'];\r\n\r\n        if (resolvedData instanceof ProductTrackerError) {\r\n            console.log(`Dashboard component error: ${resolvedData.friendlyMessage}`);\r\n        } else {\r\n            this.allProducts = resolvedData;\r\n        }\r\n        this.dataService.getAllCustomers();\r\n        this.favoriteProduct = this.dataService.favoriteProduct;\r\n        \r\n\r\n        this.title.setTitle('Product Tracker');\r\n    }\r\n\r\n    deleteProduct() {\r\n        this.dataService.deleteProduct(productId)\r\n            .subscribe(\r\n                (data: void) => {\r\n                    let index: number = this.allProducts.findIndex(product => product.productId === productId);\r\n                    this.allProducts.splice(index, 1);\r\n                },\r\n                (err: any) => console.log(err)\r\n            );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}