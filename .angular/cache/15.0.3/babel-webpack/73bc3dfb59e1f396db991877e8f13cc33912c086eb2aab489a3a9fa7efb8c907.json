{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry() {\n  var configOrCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  var config;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n  var _config = config,\n    _config$count = _config.count,\n    count = _config$count === void 0 ? Infinity : _config$count,\n    delay = _config.delay,\n    _config$resetOnSucces = _config.resetOnSuccess,\n    resetOnSuccess = _config$resetOnSucces === void 0 ? false : _config$resetOnSucces;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub = function resub() {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber.unsubscribe();\n              resub();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            resub();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n    subscribeForRetry();\n  });\n}","map":{"version":3,"names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","Infinity","config","count","delay","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub","unsubscribe","notifier","notifierSubscriber","complete","error"],"sources":["C:/Users/User/Projects/meanstack/node_modules/rxjs/dist/esm/internal/operators/retry.js"],"sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n    let config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n    return count <= 0\n        ? identity\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRetry = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, (err) => {\n                    if (soFar++ < count) {\n                        const resub = () => {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n                                notifierSubscriber.unsubscribe();\n                                resub();\n                            }, () => {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber);\n                        }\n                        else {\n                            resub();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,SAASC,KAAK,GAA2B;EAAA,IAA1BC,aAAa,uEAAGC,QAAQ;EAC1C,IAAIC,MAAM;EACV,IAAIF,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACpDE,MAAM,GAAGF,aAAa;EAC1B,CAAC,MACI;IACDE,MAAM,GAAG;MACLC,KAAK,EAAEH;IACX,CAAC;EACL;EACA,cAA4EE,MAAM;IAAA,wBAA1EC,KAAK;IAALA,KAAK,8BAAGF,QAAQ;IAAEG,KAAK,WAALA,KAAK;IAAA,gCAAEC,cAAc;IAAEA,cAAc,sCAAG,KAAK;EACvE,OAAOF,KAAK,IAAI,CAAC,GACXP,QAAQ,GACRF,OAAO,CAAC,UAACY,MAAM,EAAEC,UAAU,EAAK;IAC9B,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ;IACZ,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,GAAS;MAC5B,IAAIC,SAAS,GAAG,KAAK;MACrBF,QAAQ,GAAGH,MAAM,CAACM,SAAS,CAACjB,wBAAwB,CAACY,UAAU,EAAE,UAACM,KAAK,EAAK;QACxE,IAAIR,cAAc,EAAE;UAChBG,KAAK,GAAG,CAAC;QACb;QACAD,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC;MAC1B,CAAC,EAAEE,SAAS,EAAE,UAACC,GAAG,EAAK;QACnB,IAAIR,KAAK,EAAE,GAAGL,KAAK,EAAE;UACjB,IAAMc,KAAK,GAAG,SAARA,KAAK,GAAS;YAChB,IAAIR,QAAQ,EAAE;cACVA,QAAQ,CAACS,WAAW,EAAE;cACtBT,QAAQ,GAAG,IAAI;cACfC,iBAAiB,EAAE;YACvB,CAAC,MACI;cACDC,SAAS,GAAG,IAAI;YACpB;UACJ,CAAC;UACD,IAAIP,KAAK,IAAI,IAAI,EAAE;YACf,IAAMe,QAAQ,GAAG,OAAOf,KAAK,KAAK,QAAQ,GAAGP,KAAK,CAACO,KAAK,CAAC,GAAGN,SAAS,CAACM,KAAK,CAACY,GAAG,EAAER,KAAK,CAAC,CAAC;YACxF,IAAMY,kBAAkB,GAAGzB,wBAAwB,CAACY,UAAU,EAAE,YAAM;cAClEa,kBAAkB,CAACF,WAAW,EAAE;cAChCD,KAAK,EAAE;YACX,CAAC,EAAE,YAAM;cACLV,UAAU,CAACc,QAAQ,EAAE;YACzB,CAAC,CAAC;YACFF,QAAQ,CAACP,SAAS,CAACQ,kBAAkB,CAAC;UAC1C,CAAC,MACI;YACDH,KAAK,EAAE;UACX;QACJ,CAAC,MACI;UACDV,UAAU,CAACe,KAAK,CAACN,GAAG,CAAC;QACzB;MACJ,CAAC,CAAC,CAAC;MACH,IAAIL,SAAS,EAAE;QACXF,QAAQ,CAACS,WAAW,EAAE;QACtBT,QAAQ,GAAG,IAAI;QACfC,iBAAiB,EAAE;MACvB;IACJ,CAAC;IACDA,iBAAiB,EAAE;EACvB,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}