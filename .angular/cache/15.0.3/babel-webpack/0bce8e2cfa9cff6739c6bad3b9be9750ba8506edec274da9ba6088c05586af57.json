{"ast":null,"code":"import _classCallCheck from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpEventType } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport var LogResponseInterceptor = /*#__PURE__*/function () {\n  function LogResponseInterceptor() {\n    _classCallCheck(this, LogResponseInterceptor);\n  }\n  _createClass(LogResponseInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      console.log(\"LogResponseInterceptor - \".concat(req.url));\n      var started = Date.now();\n      return next.handle(req).pipe(tap(function (event) {\n        if (event.type === HttpEventType.Response) {\n          var elapsed = Date.now() - started;\n          console.log(\"Request for \".concat(req.urlWithParams, \" took \").concat(elapsed, \" ms.\"));\n          console.log(event.body);\n        }\n      }));\n    }\n  }]);\n  return LogResponseInterceptor;\n}();\nLogResponseInterceptor.ɵfac = function LogResponseInterceptor_Factory(t) {\n  return new (t || LogResponseInterceptor)();\n};\nLogResponseInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogResponseInterceptor,\n  factory: LogResponseInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AACA,SAA4FA,aAAa,QAAQ,sBAAsB;AAEvI,SAASC,GAAG,QAAQ,gBAAgB;;AAGpC,WAAaC,sBAAsB;EAC/B;IAAA;EAAe;EAAC;IAAA;IAAA,OAEhB,mBAAUC,GAAqB,EAAEC,IAAiB;MAC9CC,OAAO,CAACC,GAAG,oCAA6BH,GAAG,CAACI,GAAG,EAAG;MAClD,IAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE;MAC1B,OAAON,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC,CAACS,IAAI,CACxBX,GAAG,CAAC,eAAK,EAAG;QACR,IAAIY,KAAK,CAACC,IAAI,KAAKd,aAAa,CAACe,QAAQ,EAAE;UACvC,IAAMC,OAAO,GAAGP,IAAI,CAACC,GAAG,EAAE,GAAGF,OAAO;UACpCH,OAAO,CAACC,GAAG,uBAAgBH,GAAG,CAACc,aAAa,mBAASD,OAAO,UAAO;UACnEX,OAAO,CAACC,GAAG,CAACO,KAAK,CAACK,IAAI,CAAC;;MAE/B,CAAC,CAAC,CACL;IACL;EAAC;EAAA;AAAA;AAfQhB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAiB,SAAtBjB,sBAAsB;AAAA","names":["HttpEventType","tap","LogResponseInterceptor","req","next","console","log","url","started","Date","now","handle","pipe","event","type","Response","elapsed","urlWithParams","body","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\Projects\\meanstack\\src\\app\\shared\\log-response.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpEventtype, HttpEvent. HttpResponse, HttpEventType } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LogResponseInterceptor implements HttpInterceptor {\r\n    constructor() {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        console.log(`LogResponseInterceptor - ${req.url}`);\r\n        const started = Date.now();\r\n        return next.handle(req).pipe(\r\n            tap(event => {\r\n                if (event.type === HttpEventType.Response) {\r\n                    const elapsed = Date.now() - started;\r\n                    console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\r\n                    console.log(event.body);\r\n                }\r\n            })\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}