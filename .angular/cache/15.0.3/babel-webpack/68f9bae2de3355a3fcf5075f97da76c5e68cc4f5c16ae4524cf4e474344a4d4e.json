{"ast":null,"code":"import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan) {\n  var _a, _b;\n  for (var _len = arguments.length, otherArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherArgs[_key - 1] = arguments[_key];\n  }\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n    var closeWindow = function closeWindow(record) {\n      var window = record.window,\n        subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n    var startWindow = function startWindow() {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window = new Subject();\n        var record = {\n          window: window,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        executeSchedule(subs, scheduler, function () {\n          return closeWindow(record);\n        }, windowTimeSpan);\n      }\n    };\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n    startWindow();\n    var loop = function loop(cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n    var terminate = function terminate(cb) {\n      loop(function (_ref) {\n        var window = _ref.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}","map":{"version":3,"names":["Subject","asyncScheduler","Subscription","operate","createOperatorSubscriber","arrRemove","popScheduler","executeSchedule","windowTime","windowTimeSpan","_a","_b","otherArgs","scheduler","windowCreationInterval","maxWindowSize","Infinity","source","subscriber","windowRecords","restartOnClose","closeWindow","record","window","subs","complete","unsubscribe","startWindow","add","seen","push","next","asObservable","loop","cb","slice","forEach","terminate","subscribe","value","consumer","err","error"],"sources":["C:/Users/User/Projects/meanstack/node_modules/rxjs/dist/esm/internal/operators/windowTime.js"],"sourcesContent":["import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan, ...otherArgs) {\n    var _a, _b;\n    const scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n    const windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n    const maxWindowSize = otherArgs[1] || Infinity;\n    return operate((source, subscriber) => {\n        let windowRecords = [];\n        let restartOnClose = false;\n        const closeWindow = (record) => {\n            const { window, subs } = record;\n            window.complete();\n            subs.unsubscribe();\n            arrRemove(windowRecords, record);\n            restartOnClose && startWindow();\n        };\n        const startWindow = () => {\n            if (windowRecords) {\n                const subs = new Subscription();\n                subscriber.add(subs);\n                const window = new Subject();\n                const record = {\n                    window,\n                    subs,\n                    seen: 0,\n                };\n                windowRecords.push(record);\n                subscriber.next(window.asObservable());\n                executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\n            }\n        };\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n        }\n        else {\n            restartOnClose = true;\n        }\n        startWindow();\n        const loop = (cb) => windowRecords.slice().forEach(cb);\n        const terminate = (cb) => {\n            loop(({ window }) => cb(window));\n            cb(subscriber);\n            subscriber.unsubscribe();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            loop((record) => {\n                record.window.next(value);\n                maxWindowSize <= ++record.seen && closeWindow(record);\n            });\n        }, () => terminate((consumer) => consumer.complete()), (err) => terminate((consumer) => consumer.error(err))));\n        return () => {\n            windowRecords = null;\n        };\n    });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,eAAe,QAAQ,yBAAyB;AACzD,OAAO,SAASC,UAAU,CAACC,cAAc,EAAgB;EACrD,IAAIC,EAAE,EAAEC,EAAE;EAAC,kCAD+BC,SAAS;IAATA,SAAS;EAAA;EAEnD,IAAMC,SAAS,GAAG,CAACH,EAAE,GAAGJ,YAAY,CAACM,SAAS,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGT,cAAc;EAChG,IAAMa,sBAAsB,GAAG,CAACH,EAAE,GAAGC,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;EACxF,IAAMI,aAAa,GAAGH,SAAS,CAAC,CAAC,CAAC,IAAII,QAAQ;EAC9C,OAAOb,OAAO,CAAC,UAACc,MAAM,EAAEC,UAAU,EAAK;IACnC,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIC,cAAc,GAAG,KAAK;IAC1B,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,MAAM,EAAK;MAC5B,IAAQC,MAAM,GAAWD,MAAM,CAAvBC,MAAM;QAAEC,IAAI,GAAKF,MAAM,CAAfE,IAAI;MACpBD,MAAM,CAACE,QAAQ,EAAE;MACjBD,IAAI,CAACE,WAAW,EAAE;MAClBrB,SAAS,CAACc,aAAa,EAAEG,MAAM,CAAC;MAChCF,cAAc,IAAIO,WAAW,EAAE;IACnC,CAAC;IACD,IAAMA,WAAW,GAAG,SAAdA,WAAW,GAAS;MACtB,IAAIR,aAAa,EAAE;QACf,IAAMK,IAAI,GAAG,IAAItB,YAAY,EAAE;QAC/BgB,UAAU,CAACU,GAAG,CAACJ,IAAI,CAAC;QACpB,IAAMD,MAAM,GAAG,IAAIvB,OAAO,EAAE;QAC5B,IAAMsB,MAAM,GAAG;UACXC,MAAM,EAANA,MAAM;UACNC,IAAI,EAAJA,IAAI;UACJK,IAAI,EAAE;QACV,CAAC;QACDV,aAAa,CAACW,IAAI,CAACR,MAAM,CAAC;QAC1BJ,UAAU,CAACa,IAAI,CAACR,MAAM,CAACS,YAAY,EAAE,CAAC;QACtCzB,eAAe,CAACiB,IAAI,EAAEX,SAAS,EAAE;UAAA,OAAMQ,WAAW,CAACC,MAAM,CAAC;QAAA,GAAEb,cAAc,CAAC;MAC/E;IACJ,CAAC;IACD,IAAIK,sBAAsB,KAAK,IAAI,IAAIA,sBAAsB,IAAI,CAAC,EAAE;MAChEP,eAAe,CAACW,UAAU,EAAEL,SAAS,EAAEc,WAAW,EAAEb,sBAAsB,EAAE,IAAI,CAAC;IACrF,CAAC,MACI;MACDM,cAAc,GAAG,IAAI;IACzB;IACAO,WAAW,EAAE;IACb,IAAMM,IAAI,GAAG,SAAPA,IAAI,CAAIC,EAAE;MAAA,OAAKf,aAAa,CAACgB,KAAK,EAAE,CAACC,OAAO,CAACF,EAAE,CAAC;IAAA;IACtD,IAAMG,SAAS,GAAG,SAAZA,SAAS,CAAIH,EAAE,EAAK;MACtBD,IAAI,CAAC;QAAA,IAAGV,MAAM,QAANA,MAAM;QAAA,OAAOW,EAAE,CAACX,MAAM,CAAC;MAAA,EAAC;MAChCW,EAAE,CAAChB,UAAU,CAAC;MACdA,UAAU,CAACQ,WAAW,EAAE;IAC5B,CAAC;IACDT,MAAM,CAACqB,SAAS,CAAClC,wBAAwB,CAACc,UAAU,EAAE,UAACqB,KAAK,EAAK;MAC7DN,IAAI,CAAC,UAACX,MAAM,EAAK;QACbA,MAAM,CAACC,MAAM,CAACQ,IAAI,CAACQ,KAAK,CAAC;QACzBxB,aAAa,IAAI,EAAEO,MAAM,CAACO,IAAI,IAAIR,WAAW,CAACC,MAAM,CAAC;MACzD,CAAC,CAAC;IACN,CAAC,EAAE;MAAA,OAAMe,SAAS,CAAC,UAACG,QAAQ;QAAA,OAAKA,QAAQ,CAACf,QAAQ,EAAE;MAAA,EAAC;IAAA,GAAE,UAACgB,GAAG;MAAA,OAAKJ,SAAS,CAAC,UAACG,QAAQ;QAAA,OAAKA,QAAQ,CAACE,KAAK,CAACD,GAAG,CAAC;MAAA,EAAC;IAAA,EAAC,CAAC;IAC9G,OAAO,YAAM;MACTtB,aAAa,GAAG,IAAI;IACxB,CAAC;EACL,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}