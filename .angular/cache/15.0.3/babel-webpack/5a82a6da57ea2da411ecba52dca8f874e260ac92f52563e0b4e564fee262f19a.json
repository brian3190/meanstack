{"ast":null,"code":"import _toConsumableArray from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n    var _loop = function _loop(sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, _toConsumableArray(result)) : result);\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop(sourceIndex);\n    }\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"names":["Observable","innerFrom","argsOrArgArray","EMPTY","createOperatorSubscriber","popResultSelector","zip","args","resultSelector","sources","length","subscriber","buffers","map","completed","add","sourceIndex","subscribe","value","push","every","buffer","result","shift","next","some","i","complete","closed"],"sources":["C:/Users/User/Projects/meanstack/node_modules/rxjs/dist/esm/internal/observable/zip.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip(...args) {\n    const resultSelector = popResultSelector(args);\n    const sources = argsOrArgArray(args);\n    return sources.length\n        ? new Observable((subscriber) => {\n            let buffers = sources.map(() => []);\n            let completed = sources.map(() => false);\n            subscriber.add(() => {\n                buffers = completed = null;\n            });\n            for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n                innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    buffers[sourceIndex].push(value);\n                    if (buffers.every((buffer) => buffer.length)) {\n                        const result = buffers.map((buffer) => buffer.shift());\n                        subscriber.next(resultSelector ? resultSelector(...result) : result);\n                        if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                            subscriber.complete();\n                        }\n                    }\n                }, () => {\n                    completed[sourceIndex] = true;\n                    !buffers[sourceIndex].length && subscriber.complete();\n                }));\n            }\n            return () => {\n                buffers = completed = null;\n            };\n        })\n        : EMPTY;\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,wBAAwB,QAAQ,iCAAiC;AAC1E,SAASC,iBAAiB,QAAQ,cAAc;AAChD,OAAO,SAASC,GAAG,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EACvB,IAAMC,cAAc,GAAGH,iBAAiB,CAACE,IAAI,CAAC;EAC9C,IAAME,OAAO,GAAGP,cAAc,CAACK,IAAI,CAAC;EACpC,OAAOE,OAAO,CAACC,MAAM,GACf,IAAIV,UAAU,CAAC,UAACW,UAAU,EAAK;IAC7B,IAAIC,OAAO,GAAGH,OAAO,CAACI,GAAG,CAAC;MAAA,OAAM,EAAE;IAAA,EAAC;IACnC,IAAIC,SAAS,GAAGL,OAAO,CAACI,GAAG,CAAC;MAAA,OAAM,KAAK;IAAA,EAAC;IACxCF,UAAU,CAACI,GAAG,CAAC,YAAM;MACjBH,OAAO,GAAGE,SAAS,GAAG,IAAI;IAC9B,CAAC,CAAC;IAAC,2BACME,WAAW;MAChBf,SAAS,CAACQ,OAAO,CAACO,WAAW,CAAC,CAAC,CAACC,SAAS,CAACb,wBAAwB,CAACO,UAAU,EAAE,UAACO,KAAK,EAAK;QACtFN,OAAO,CAACI,WAAW,CAAC,CAACG,IAAI,CAACD,KAAK,CAAC;QAChC,IAAIN,OAAO,CAACQ,KAAK,CAAC,UAACC,MAAM;UAAA,OAAKA,MAAM,CAACX,MAAM;QAAA,EAAC,EAAE;UAC1C,IAAMY,MAAM,GAAGV,OAAO,CAACC,GAAG,CAAC,UAACQ,MAAM;YAAA,OAAKA,MAAM,CAACE,KAAK,EAAE;UAAA,EAAC;UACtDZ,UAAU,CAACa,IAAI,CAAChB,cAAc,GAAGA,cAAc,kCAAIc,MAAM,EAAC,GAAGA,MAAM,CAAC;UACpE,IAAIV,OAAO,CAACa,IAAI,CAAC,UAACJ,MAAM,EAAEK,CAAC;YAAA,OAAK,CAACL,MAAM,CAACX,MAAM,IAAII,SAAS,CAACY,CAAC,CAAC;UAAA,EAAC,EAAE;YAC7Df,UAAU,CAACgB,QAAQ,EAAE;UACzB;QACJ;MACJ,CAAC,EAAE,YAAM;QACLb,SAAS,CAACE,WAAW,CAAC,GAAG,IAAI;QAC7B,CAACJ,OAAO,CAACI,WAAW,CAAC,CAACN,MAAM,IAAIC,UAAU,CAACgB,QAAQ,EAAE;MACzD,CAAC,CAAC,CAAC;IAAC;IAbR,KAAK,IAAIX,WAAW,GAAG,CAAC,EAAE,CAACL,UAAU,CAACiB,MAAM,IAAIZ,WAAW,GAAGP,OAAO,CAACC,MAAM,EAAEM,WAAW,EAAE,EAAE;MAAA,MAApFA,WAAW;IAcpB;IACA,OAAO,YAAM;MACTJ,OAAO,GAAGE,SAAS,GAAG,IAAI;IAC9B,CAAC;EACL,CAAC,CAAC,GACAX,KAAK;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}