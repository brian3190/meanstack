{"ast":null,"code":"import { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  return operate(function (source, subscriber) {\n    var state = seed;\n    return mergeInternals(source, subscriber, function (value, index) {\n      return accumulator(state, value, index);\n    }, concurrent, function (value) {\n      state = value;\n    }, false, undefined, function () {\n      return state = null;\n    });\n  });\n}","map":{"version":3,"names":["operate","mergeInternals","mergeScan","accumulator","seed","concurrent","Infinity","source","subscriber","state","value","index","undefined"],"sources":["C:/Users/User/Projects/meanstack/node_modules/rxjs/dist/esm/internal/operators/mergeScan.js"],"sourcesContent":["import { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nexport function mergeScan(accumulator, seed, concurrent = Infinity) {\n    return operate((source, subscriber) => {\n        let state = seed;\n        return mergeInternals(source, subscriber, (value, index) => accumulator(state, value, index), concurrent, (value) => {\n            state = value;\n        }, false, undefined, () => (state = null));\n    });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAO,SAASC,SAAS,CAACC,WAAW,EAAEC,IAAI,EAAyB;EAAA,IAAvBC,UAAU,uEAAGC,QAAQ;EAC9D,OAAON,OAAO,CAAC,UAACO,MAAM,EAAEC,UAAU,EAAK;IACnC,IAAIC,KAAK,GAAGL,IAAI;IAChB,OAAOH,cAAc,CAACM,MAAM,EAAEC,UAAU,EAAE,UAACE,KAAK,EAAEC,KAAK;MAAA,OAAKR,WAAW,CAACM,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAAA,GAAEN,UAAU,EAAE,UAACK,KAAK,EAAK;MACjHD,KAAK,GAAGC,KAAK;IACjB,CAAC,EAAE,KAAK,EAAEE,SAAS,EAAE;MAAA,OAAOH,KAAK,GAAG,IAAI;IAAA,CAAC,CAAC;EAC9C,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}