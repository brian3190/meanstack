{"ast":null,"code":"import _inherits from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/User/Projects/meanstack/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license Angular v15.0.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nvar HttpHandler = /*#__PURE__*/_createClass(function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n});\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nvar HttpBackend = /*#__PURE__*/_createClass(function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n    _classCallCheck(this, HttpHeaders);\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    this.lazyUpdate = null;\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n            _this.maybeSetNormalizedName(name, key);\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = function () {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        _this.headers = new Map();\n        Object.keys(headers).forEach(function (name) {\n          var values = headers[name];\n          var key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            _this.headers.set(key, values);\n            _this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n        this.lazyInit = null;\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n          if (typeof value === 'string') {\n            value = [value];\n          }\n          if (value.length === 0) {\n            return;\n          }\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n        case 'd':\n          var toDelete = update.value;\n          if (!toDelete) {\n            this.headers[\"delete\"](key);\n            this.normalizedNames[\"delete\"](key);\n          } else {\n            var existing = this.headers.get(key);\n            if (!existing) {\n              return;\n            }\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n            if (existing.length === 0) {\n              this.headers[\"delete\"](key);\n              this.normalizedNames[\"delete\"](key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n          break;\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n  return HttpHeaders;\n}();\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n  for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n      throw new Error(\"Unexpected value of the `\".concat(key, \"` header provided. \") + \"Expecting either a string or an array, but got: `\".concat(value, \"`.\"));\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n  _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n  return HttpUrlEncodingCodec;\n}();\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n        _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        val = _ref2[1];\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nvar STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nvar STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {\n    var _STANDARD_ENCODING_RE;\n    return (_STANDARD_ENCODING_RE = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _STANDARD_ENCODING_RE !== void 0 ? _STANDARD_ENCODING_RE : s;\n  });\n}\nfunction valueToString(value) {\n  return \"\".concat(value);\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpParams);\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key];\n        // convert the values to strings\n        var values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        _this5.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key);\n        // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      })\n      // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n      if (this.map === null) {\n        this.map = new Map();\n      }\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(valueToString(update.value));\n              _this7.map.set(update.param, base);\n              break;\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n                var idx = _base.indexOf(valueToString(update.value));\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map[\"delete\"](update.param);\n                }\n              } else {\n                _this7.map[\"delete\"](update.param);\n                break;\n              }\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n  return HttpParams;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nvar HttpContextToken = /*#__PURE__*/_createClass(function HttpContextToken(defaultValue) {\n  _classCallCheck(this, HttpContextToken);\n  this.defaultValue = defaultValue;\n});\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  _createClass(HttpContext, [{\n    key: \"set\",\n    value: function set(token, value) {\n      this.map.set(token, value);\n      return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      if (!this.map.has(token)) {\n        this.map.set(token, token.defaultValue());\n      }\n      return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(token) {\n      this.map[\"delete\"](token);\n      return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n  }, {\n    key: \"has\",\n    value: function has(token) {\n      return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }]);\n  return HttpContext;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    _classCallCheck(this, HttpRequest);\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    this.responseType = 'json';\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    var options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.context) {\n        this.context = options.context;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      }\n      // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n        return this.body;\n      }\n      // Check whether the body is an instance of HttpUrlEncodedParams.\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      }\n      // Check whether the body is an object or array, and serialize with JSON if so.\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      }\n      // Fall back on toString() for everything else.\n      return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      }\n      // FormData bodies rely on the browser's content type assignment.\n      if (isFormData(this.body)) {\n        return null;\n      }\n      // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      }\n      // Array buffers have unknown contents and thus no type can be inferred.\n      if (isArrayBuffer(this.body)) {\n        return null;\n      }\n      // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      }\n      // `HttpUrlEncodedParams` has its own content-type.\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      }\n      // Arrays, objects, boolean and numbers will be encoded as JSON.\n      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n        return 'application/json';\n      }\n      // No type could be inferred.\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _update$context;\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType;\n      // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n      var body = update.body !== undefined ? update.body : this.body;\n      // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress;\n      // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params;\n      // Pass on context if needed\n      var context = (_update$context = update.context) !== null && _update$context !== void 0 ? _update$context : this.context;\n      // Check whether the caller has asked to add headers.\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      }\n      // Check whether the caller has asked to set params.\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      }\n      // Finally, construct the new HttpRequest using the pieces from above.\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        context: context,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials\n      });\n    }\n  }]);\n  return HttpRequest;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nvar HttpResponseBase = /*#__PURE__*/_createClass(\n/**\n * Super-constructor for all responses.\n *\n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n  _classCallCheck(this, HttpResponseBase);\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null;\n  // Cache the ok value to avoid defining a getter.\n  this.ok = this.status >= 200 && this.status < 300;\n});\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n  var _super = _createSuper(HttpHeaderResponse);\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpHeaderResponse);\n    _this8 = _super.call(this, init);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n  return HttpHeaderResponse;\n}(HttpResponseBase);\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  _inherits(HttpResponse, _HttpResponseBase2);\n  var _super2 = _createSuper(HttpResponse);\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  function HttpResponse() {\n    var _this9;\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpResponse);\n    _this9 = _super2.call(this, init);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n  _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n  return HttpResponse;\n}(HttpResponseBase);\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n  var _super3 = _createSuper(HttpErrorResponse);\n  function HttpErrorResponse(init) {\n    var _this10;\n    _classCallCheck(this, HttpErrorResponse);\n    // Initialize with a default status of 0 / Unknown Error.\n    _this10 = _super3.call(this, init, 0, 'Unknown Error');\n    _this10.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    _this10.ok = false;\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (_this10.status >= 200 && _this10.status < 300) {\n      _this10.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this10.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n    _this10.error = init.error || null;\n    return _this10;\n  }\n  return _createClass(HttpErrorResponse);\n}(HttpResponseBase);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient(handler) {\n    _classCallCheck(this, HttpClient);\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  _createClass(HttpClient, [{\n    key: \"request\",\n    value: function request(first, url) {\n      var _this11 = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var req;\n      // First, check whether the primary argument is an instance of `HttpRequest`.\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        var headers = undefined;\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        }\n        // Sort out parameters.\n        var params = undefined;\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        }\n        // Construct the request.\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers: headers,\n          context: options.context,\n          params: params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials\n        });\n      }\n      // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n      var events$ = of(req).pipe(concatMap(function (req) {\n        return _this11.handler.handle(req);\n      }));\n      // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      }\n      // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n      var res$ = events$.pipe(filter(function (event) {\n        return event instanceof HttpResponse;\n      }));\n      // Decide which stream to return.\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new Error('Response is not an ArrayBuffer.');\n                }\n                return res.body;\n              }));\n            case 'blob':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new Error('Response is not a Blob.');\n                }\n                return res.body;\n              }));\n            case 'text':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new Error('Response is not a string.');\n                }\n                return res.body;\n              }));\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(function (res) {\n                return res.body;\n              }));\n          }\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n        default:\n          // Guard against new future observe types being added.\n          throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n      }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n  }, {\n    key: \"head\",\n    value: function head(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n  }, {\n    key: \"jsonp\",\n    value: function jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n  }, {\n    key: \"options\",\n    value: function options(url) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('OPTIONS', url, _options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n  }, {\n    key: \"patch\",\n    value: function patch(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n  }, {\n    key: \"post\",\n    value: function post(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n  }, {\n    key: \"put\",\n    value: function put(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PUT', url, addBody(options, body));\n    }\n  }]);\n  return HttpClient;\n}();\nHttpClient.Éµfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ÉµÉµinject(HttpHandler));\n};\nHttpClient.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return function (initialRequest, finalHandlerFn) {\n    return interceptor.intercept(initialRequest, {\n      handle: function handle(downstreamRequest) {\n        return chainTailFn(downstreamRequest, finalHandlerFn);\n      }\n    });\n  };\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return function (initialRequest, finalHandlerFn) {\n    return injector.runInContext(function () {\n      return interceptorFn(initialRequest, function (downstreamRequest) {\n        return chainTailFn(downstreamRequest, finalHandlerFn);\n      });\n    });\n  };\n  // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nvar HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n  var chain = null;\n  return function (req, handler) {\n    if (chain === null) {\n      var _inject;\n      var interceptors = (_inject = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      })) !== null && _inject !== void 0 ? _inject : [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    return chain(req, handler);\n  };\n}\nvar HttpInterceptorHandler = /*#__PURE__*/function (_HttpHandler) {\n  _inherits(HttpInterceptorHandler, _HttpHandler);\n  var _super4 = _createSuper(HttpInterceptorHandler);\n  function HttpInterceptorHandler(backend, injector) {\n    var _this12;\n    _classCallCheck(this, HttpInterceptorHandler);\n    _this12 = _super4.call(this);\n    _this12.backend = backend;\n    _this12.injector = injector;\n    _this12.chain = null;\n    return _this12;\n  }\n  _createClass(HttpInterceptorHandler, [{\n    key: \"handle\",\n    value: function handle(initialRequest) {\n      var _this13 = this;\n      if (this.chain === null) {\n        var dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n        // Note: interceptors are wrapped right-to-left so that final execution order is\n        // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n        // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n        // out.\n        this.chain = dedupedInterceptorFns.reduceRight(function (nextSequencedFn, interceptorFn) {\n          return chainedInterceptorFn(nextSequencedFn, interceptorFn, _this13.injector);\n        }, interceptorChainEndFn);\n      }\n      return this.chain(initialRequest, function (downstreamRequest) {\n        return _this13.backend.handle(downstreamRequest);\n      });\n    }\n  }]);\n  return HttpInterceptorHandler;\n}(HttpHandler);\nHttpInterceptorHandler.Éµfac = function HttpInterceptorHandler_Factory(t) {\n  return new (t || HttpInterceptorHandler)(i0.ÉµÉµinject(HttpBackend), i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nHttpInterceptorHandler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpInterceptorHandler,\n  factory: HttpInterceptorHandler.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nvar foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nvar JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /*#__PURE__*/_createClass(function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n});\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nvar JsonpClientBackend = /*#__PURE__*/function () {\n  function JsonpClientBackend(callbackMap, document) {\n    _classCallCheck(this, JsonpClientBackend);\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  _createClass(JsonpClientBackend, [{\n    key: \"nextCallback\",\n    value: function nextCallback() {\n      return \"ng_jsonp_callback_\".concat(nextRequestId++);\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n  }, {\n    key: \"handle\",\n    value: function handle(req) {\n      var _this14 = this;\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new Error(JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n      }\n      // Check the request headers. JSONP doesn't support headers and\n      // cannot set any that were supplied.\n      if (req.headers.keys().length > 0) {\n        throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n      }\n      // Everything else happens inside the Observable boundary.\n      return new Observable(function (observer) {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        var callback = _this14.nextCallback();\n        var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\"));\n        // Construct the <script> tag and point it at the URL.\n        var node = _this14.document.createElement('script');\n        node.src = url;\n        // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n        var body = null;\n        // Whether the response callback has been called.\n        var finished = false;\n        // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n        _this14.callbackMap[callback] = function (data) {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete _this14.callbackMap[callback];\n          // Set state to indicate data was received.\n          body = data;\n          finished = true;\n        };\n        // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n        var cleanup = function cleanup() {\n          // Remove the <script> tag if it's still on the page.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n          // Remove the response callback from the callbackMap (window object in the\n          // browser).\n          delete _this14.callbackMap[callback];\n        };\n        // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n        var onLoad = function onLoad(event) {\n          // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n          _this14.resolvedPromise.then(function () {\n            // Cleanup the page.\n            cleanup();\n            // Check whether the response callback has run.\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url: url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            }\n            // Success. body either contains the response body or null if none was\n            // returned.\n            observer.next(new HttpResponse({\n              body: body,\n              status: 200 /* HttpStatusCode.Ok */,\n              statusText: 'OK',\n              url: url\n            }));\n            // Complete the stream, the response is over.\n            observer.complete();\n          });\n        };\n        // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n        var onError = function onError(error) {\n          cleanup();\n          // Wrap the error in a HttpErrorResponse.\n          observer.error(new HttpErrorResponse({\n            error: error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url: url\n          }));\n        };\n        // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n        _this14.document.body.appendChild(node);\n        // The request has now been successfully sent.\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        // Cancellation handler.\n        return function () {\n          if (!finished) {\n            _this14.removeListeners(node);\n          }\n          // And finally, clean up the page.\n          cleanup();\n        };\n      });\n    }\n  }, {\n    key: \"removeListeners\",\n    value: function removeListeners(script) {\n      // Issue #34818\n      // Changing <script>'s ownerDocument will prevent it from execution.\n      // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n      if (!foreignDocument) {\n        foreignDocument = this.document.implementation.createHTMLDocument();\n      }\n      foreignDocument.adoptNode(script);\n    }\n  }]);\n  return JsonpClientBackend;\n}();\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(i0.ÉµÉµinject(JsonpCallbackContext), i0.ÉµÉµinject(DOCUMENT));\n};\nJsonpClientBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nvar JsonpInterceptor = /*#__PURE__*/function () {\n  function JsonpInterceptor(injector) {\n    _classCallCheck(this, JsonpInterceptor);\n    this.injector = injector;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  _createClass(JsonpInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(initialRequest, next) {\n      return this.injector.runInContext(function () {\n        return jsonpInterceptorFn(initialRequest, function (downstreamRequest) {\n          return next.handle(downstreamRequest);\n        });\n      });\n    }\n  }]);\n  return JsonpInterceptor;\n}();\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nJsonpInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nvar HttpXhrBackend = /*#__PURE__*/function () {\n  function HttpXhrBackend(xhrFactory) {\n    _classCallCheck(this, HttpXhrBackend);\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  _createClass(HttpXhrBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this15 = this;\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");\n      }\n      // Everything happens on Observable subscription.\n      return new Observable(function (observer) {\n        // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n        var xhr = _this15.xhrFactory.build();\n        xhr.open(req.method, req.urlWithParams);\n        if (!!req.withCredentials) {\n          xhr.withCredentials = true;\n        }\n        // Add all the requested headers.\n        req.headers.forEach(function (name, values) {\n          return xhr.setRequestHeader(name, values.join(','));\n        });\n        // Add an Accept header if one isn't present already.\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        }\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!req.headers.has('Content-Type')) {\n          var detectedType = req.detectContentTypeHeader();\n          // Sometimes Content-Type detection fails.\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        }\n        // Set the responseType if one was requested.\n        if (req.responseType) {\n          var responseType = req.responseType.toLowerCase();\n          // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        }\n        // Serialize the request body if one is present. If not, this will be set to null.\n        var reqBody = req.serializeBody();\n        // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n        var headerResponse = null;\n        // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n        var partialFromXhr = function partialFromXhr() {\n          if (headerResponse !== null) {\n            return headerResponse;\n          }\n          var statusText = xhr.statusText || 'OK';\n          // Parse headers from XMLHttpRequest - this step is lazy.\n          var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n          // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n          var url = getResponseUrl(xhr) || req.url;\n          // Construct the HttpHeaderResponse and memoize it.\n          headerResponse = new HttpHeaderResponse({\n            headers: headers,\n            status: xhr.status,\n            statusText: statusText,\n            url: url\n          });\n          return headerResponse;\n        };\n        // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n        var onLoad = function onLoad() {\n          // Read response state from the memoized partial data.\n          var _partialFromXhr = partialFromXhr(),\n            headers = _partialFromXhr.headers,\n            status = _partialFromXhr.status,\n            statusText = _partialFromXhr.statusText,\n            url = _partialFromXhr.url;\n          // The body will be read out if present.\n          var body = null;\n          if (status !== 204 /* HttpStatusCode.NoContent */) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          }\n          // Normalize another potential bug (this one comes from CORS).\n          if (status === 0) {\n            status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n          }\n          // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n          var ok = status >= 200 && status < 300;\n          // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            var originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n              // JSON response. Restore the original body (including any XSSI prefix) to deliver\n              // a better error response.\n              body = originalBody;\n              // If this was an error request to begin with, leave it as a string, it probably\n              // just isn't JSON. Otherwise, deliver the parsing error to the user.\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false;\n                // The parse error contains the text of the body that failed to parse.\n                body = {\n                  error: error,\n                  text: body\n                };\n              }\n            }\n          }\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            }));\n          }\n        };\n        // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n        var onError = function onError(error) {\n          var _partialFromXhr2 = partialFromXhr(),\n            url = _partialFromXhr2.url;\n          var res = new HttpErrorResponse({\n            error: error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        };\n        // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progress event.\n        var sentHeaders = false;\n        // The download progress event handler, which is only registered if\n        // progress events are enabled.\n        var onDownProgress = function onDownProgress(event) {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          }\n          // Start building the download progress event to deliver on the response\n          // event stream.\n          var progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          };\n          // Set the total number of bytes in the event if it's available.\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          }\n          // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          }\n          // Finally, fire the event.\n          observer.next(progressEvent);\n        };\n        // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n        var onUpProgress = function onUpProgress(event) {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          var progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          };\n          // If the total number of bytes being uploaded is available, include\n          // it.\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          }\n          // Send the event.\n          observer.next(progress);\n        };\n        // By default, register for load and error events.\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError);\n        // Progress events are only enabled if requested.\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress);\n          // Upload progress depends on whether there is a body to upload.\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        }\n        // Fire the request, and notify the event stream that it was fired.\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        // This is the return from the Observable function, which is the\n        // request cancellation handler.\n        return function () {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          }\n          // Finally, abort the in-flight request.\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }\n  }]);\n  return HttpXhrBackend;\n}();\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(i0.ÉµÉµinject(i1.XhrFactory));\n};\nHttpXhrBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nvar XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: function factory() {\n    return XSRF_DEFAULT_COOKIE_NAME;\n  }\n});\nvar XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: function factory() {\n    return XSRF_DEFAULT_HEADER_NAME;\n  }\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nvar HttpXsrfTokenExtractor = /*#__PURE__*/_createClass(function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n});\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n  function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n    _classCallCheck(this, HttpXsrfCookieExtractor);\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n    this.parseCount = 0;\n  }\n  _createClass(HttpXsrfCookieExtractor, [{\n    key: \"getToken\",\n    value: function getToken() {\n      if (this.platform === 'server') {\n        return null;\n      }\n      var cookieString = this.doc.cookie || '';\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n      return this.lastToken;\n    }\n  }]);\n  return HttpXsrfCookieExtractor;\n}();\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(i0.ÉµÉµinject(DOCUMENT), i0.ÉµÉµinject(PLATFORM_ID), i0.ÉµÉµinject(XSRF_COOKIE_NAME));\n};\nHttpXsrfCookieExtractor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\nfunction xsrfInterceptorFn(req, next) {\n  var lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  var token = inject(HttpXsrfTokenExtractor).getToken();\n  var headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /*#__PURE__*/function () {\n  function HttpXsrfInterceptor(injector) {\n    _classCallCheck(this, HttpXsrfInterceptor);\n    this.injector = injector;\n  }\n  _createClass(HttpXsrfInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(initialRequest, next) {\n      return this.injector.runInContext(function () {\n        return xsrfInterceptorFn(initialRequest, function (downstreamRequest) {\n          return next.handle(downstreamRequest);\n        });\n      });\n    }\n  }]);\n  return HttpXsrfInterceptor;\n}();\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nHttpXsrfInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n  return {\n    Éµkind: kind,\n    Éµproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\nfunction provideHttpClient() {\n  for (var _len = arguments.length, features = new Array(_len), _key = 0; _key < _len; _key++) {\n    features[_key] = arguments[_key];\n  }\n  if (ngDevMode) {\n    var featureKinds = new Set(features.map(function (f) {\n      return f.Éµkind;\n    }));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? \"Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.\" : '');\n    }\n  }\n  var providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (var _i2 = 0, _features = features; _i2 < _features.length; _i2++) {\n    var feature = _features[_i2];\n    providers.push.apply(providers, _toConsumableArray(feature.Éµproviders));\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(function (interceptorFn) {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nvar LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\nfunction withXsrfConfiguration(_ref3) {\n  var cookieName = _ref3.cookieName,\n    headerName = _ref3.headerName;\n  var providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: function useFactory() {\n      var handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nvar HttpClientXsrfModule = /*#__PURE__*/function () {\n  function HttpClientXsrfModule() {\n    _classCallCheck(this, HttpClientXsrfModule);\n  }\n  _createClass(HttpClientXsrfModule, null, [{\n    key: \"disable\",\n    value:\n    /**\n     * Disable the default XSRF protection.\n     */\n    function disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [withNoXsrfProtection().Éµproviders]\n      };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n  }, {\n    key: \"withOptions\",\n    value: function withOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: withXsrfConfiguration(options).Éµproviders\n      };\n    }\n  }]);\n  return HttpClientXsrfModule;\n}();\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\nHttpClientXsrfModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }).Éµproviders, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).Éµproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nvar HttpClientModule = /*#__PURE__*/_createClass(function HttpClientModule() {\n  _classCallCheck(this, HttpClientModule);\n});\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\nHttpClientModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }))]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }))]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nvar HttpClientJsonpModule = /*#__PURE__*/_createClass(function HttpClientJsonpModule() {\n  _classCallCheck(this, HttpClientJsonpModule);\n});\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\nHttpClientJsonpModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [withJsonpSupport().Éµproviders]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().Éµproviders]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nvar XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };","map":{"version":3,"names":["i1","DOCUMENT","ÉµparseCookieValue","XhrFactory","XhrFactory$1","i0","Injectable","InjectionToken","inject","Inject","PLATFORM_ID","makeEnvironmentProviders","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","assertValidHeaders","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","entries","isArray","Error","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","replace","param","eqIdx","decodeKey","decodeValue","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","Éµfac","Éµprov","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","optional","reduceRight","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","next","complete","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","args","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","factory","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","xsrfInterceptorFn","lcUrl","startsWith","getToken","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","Éµkind","Éµproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","ngModule","Éµmod","Éµinj","HttpClientModule","HttpClientJsonpModule","ÉµHttpInterceptingHandler","ÉµHttpInterceptorHandler"],"sources":["C:/Users/User/Projects/meanstack/node_modules/@angular/common/fesm2020/http.mjs"],"sourcesContent":["/**\n * @license Angular v15.0.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (typeof value !== 'string' && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClient });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        return chain(req, handler);\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n    }\n}\nHttpInterceptorHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpInterceptorHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpInterceptorHandler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpClientBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXhrBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        Éµkind: kind,\n        Éµproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.Éµkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.Éµproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().Éµproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).Éµproviders,\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        }).Éµproviders,\n        { provide: XSRF_ENABLED, useValue: true },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).Éµproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientModule });\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientModule, providers: [\n        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        })),\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        })),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        withJsonpSupport().Éµproviders,\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().Éµproviders,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };\n"],"mappings":"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AG,IAAI,eAAe,eAAKtE,IAAI,CAAC6F,MAAM,cAAI7F,IAAI,CAAC8F,UAAU,CAAE;IAChH;IACA,QAAKQ,KAAK,GAAGtG,IAAI,CAACsG,KAAK,IAAI,IAAI;IAAC;EACpC;EAAC;AAAA,EAnB2BZ,gBAAgB;AAsBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,OAAO,CAAC9D,OAAO,EAAEgC,IAAI,EAAE;EAC5B,OAAO;IACHA,IAAI,EAAJA,IAAI;IACJpG,OAAO,EAAEoE,OAAO,CAACpE,OAAO;IACxByG,OAAO,EAAErC,OAAO,CAACqC,OAAO;IACxB0B,OAAO,EAAE/D,OAAO,CAAC+D,OAAO;IACxB/E,MAAM,EAAEgB,OAAO,CAAChB,MAAM;IACtBiD,cAAc,EAAEjC,OAAO,CAACiC,cAAc;IACtCE,YAAY,EAAEnC,OAAO,CAACmC,YAAY;IAClCD,eAAe,EAAElC,OAAO,CAACkC;EAC7B,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA,IAuDM8B,UAAU;EACZ,oBAAYC,OAAO,EAAE;IAAA;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAzBI;IAAA;IAAA,OA0BA,iBAAQC,KAAK,EAAErC,GAAG,EAAgB;MAAA;MAAA,IAAd7B,OAAO,uEAAG,CAAC,CAAC;MAC5B,IAAImE,GAAG;MACP;MACA,IA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}